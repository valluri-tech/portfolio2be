AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  portfolioBE

  Sample SAM Template for portfolioBE

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Resources:

  ProfileHitsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt ProfileHitsFunctionExecutionRole.Arn
      CodeUri: profile-hits/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      # Events:
      #   HelloWorld:
      #     Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
      #     Properties:
      #       Path: /profilehits
      #       Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  ProfileHitsFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This is a Role for Lambda to talk to DynamoDB
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: !GetAtt DynamoDBTable.Arn
                # Resource: '*'
        - PolicyName: AllowCWAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  profileHitsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProfileHitsFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", !Ref PortfolioApi, "/*/*/*" ] ] 

  DynamoDBTable:
   Type: AWS::DynamoDB::Table
   Properties:
    TableName: portfoliorequests
    KeySchema:
      - AttributeName: "Date"
        KeyType: HASH
      - AttributeName: "Time"
        KeyType: RANGE
    AttributeDefinitions: 
      - AttributeName: Date
        AttributeType: S
      - AttributeName: Time
        AttributeType: S
    ProvisionedThroughput:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1

  PortfolioApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title: "portfolio"
          version: "2024-04-11 00:36:47UTC"
        paths:
          /portfolio:
            get:
              responses:
                default:
                  description: "Default response for GET /portfolio"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "2.0"
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProfileHitsFunction.Arn}/invocations"
                connectionType: "INTERNET"
            post:
              responses:
                default:
                  description: "Default response for POST /portfolio"
              x-amazon-apigateway-integration:
                payloadFormatVersion: "2.0"
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProfileHitsFunction.Arn}/invocations"
                connectionType: "INTERNET"
        x-amazon-apigateway-importexport-version: "1.0"

  PortfolioApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref PortfolioApi
      StageName: prod

  PortfolioApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      # StageName: "prod"
      RestApiId: !Ref PortfolioApi
      DeploymentId: !Ref PortfolioApiDeployment

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # HelloWorldApi:
  #   Description: API Gateway endpoint URL for Prod stage for Hello World function
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/profilehits/"
  ProfileHitsFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt ProfileHitsFunction.Arn
  DynammoDBARN:
    Description: Portfolio requests are saved here
    Value: !GetAtt DynamoDBTable.Arn
  PortfolioApiID:
    Description: Portfolio API ID
    Value: !Ref PortfolioApi
  # ProfileHitsFunctionIamRole:
  #   Description: Implicit IAM Role created for Hello World function
  #   Value: !GetAtt ProfileHitsFunctionRole.Arn
